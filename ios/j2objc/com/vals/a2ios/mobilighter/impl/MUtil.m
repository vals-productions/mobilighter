//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ..//android/com/vals/a2ios/mobilighter/impl/MUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vals/a2ios/mobilighter/impl/MUtil.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

__attribute__((unused)) static NSString *MUtil_emptyIfNullWithNSString_(NSString *str);

@implementation MUtil

+ (NSString *)actualUrlWithNSString:(NSString *)baseUrl
                       withNSString:(NSString *)paramString {
  return MUtil_actualUrlWithNSString_withNSString_(baseUrl, paramString);
}

+ (jboolean)isNewerWithJavaUtilDate:(JavaUtilDate *)d1
                   withJavaUtilDate:(JavaUtilDate *)d2 {
  return MUtil_isNewerWithJavaUtilDate_withJavaUtilDate_(d1, d2);
}

+ (NSString *)concatenateWithNSStringArray:(IOSObjectArray *)c {
  return MUtil_concatenateWithNSStringArray_(c);
}

+ (NSString *)concatenateWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return MUtil_concatenateWithJavaUtilCollection_(c);
}

+ (NSString *)mapToUrlWithJavaUtilMap:(id<JavaUtilMap>)map {
  return MUtil_mapToUrlWithJavaUtilMap_(map);
}

+ (void)addNotNullValueWithJavaUtilMap:(id<JavaUtilMap>)map
                          withNSString:(NSString *)name
                                withId:(id)value {
  MUtil_addNotNullValueWithJavaUtilMap_withNSString_withId_(map, name, value);
}

+ (NSString *)getParametersStrWithJavaUtilMap:(id<JavaUtilMap>)paramMap {
  return MUtil_getParametersStrWithJavaUtilMap_(paramMap);
}

+ (id)getFirstElementOrNullWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return MUtil_getFirstElementOrNullWithJavaUtilCollection_(coll);
}

+ (id<JavaUtilCollection>)emptyIfNullWithNSObjectArray:(IOSObjectArray *)a {
  return MUtil_emptyIfNullWithNSObjectArray_(a);
}

+ (id<JavaUtilCollection>)emptyIfNullWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return MUtil_emptyIfNullWithJavaUtilCollection_(c);
}

+ (jboolean)isEmptyWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return MUtil_isEmptyWithJavaUtilCollection_(c);
}

+ (jboolean)isEqualToWithNSString:(NSString *)s1
                     withNSString:(NSString *)s2 {
  return MUtil_isEqualToWithNSString_withNSString_(s1, s2);
}

+ (jboolean)isGWithNSNumber:(NSNumber *)n1
               withNSNumber:(NSNumber *)n2 {
  return MUtil_isGWithNSNumber_withNSNumber_(n1, n2);
}

+ (jboolean)isEqualToWithNSNumber:(NSNumber *)o1
                     withNSNumber:(NSNumber *)value {
  return MUtil_isEqualToWithNSNumber_withNSNumber_(o1, value);
}

+ (jboolean)isEqualToWithNSNumber:(NSNumber *)o1
                     withNSNumber:(NSNumber *)value
               withJavaLangDouble:(JavaLangDouble *)allowance {
  return MUtil_isEqualToWithNSNumber_withNSNumber_withJavaLangDouble_(o1, value, allowance);
}

+ (jboolean)isEmptyWithNSString:(NSString *)s1 {
  return MUtil_isEmptyWithNSString_(s1);
}

+ (jboolean)containsAnyCharWithNSString:(NSString *)strToCheck
                           withNSString:(NSString *)charSeq {
  return MUtil_containsAnyCharWithNSString_withNSString_(strToCheck, charSeq);
}

+ (JavaLangDouble *)toDoubleWithId:(id)value {
  return MUtil_toDoubleWithId_(value);
}

+ (JavaLangInteger *)toIntWithId:(id)value {
  return MUtil_toIntWithId_(value);
}

+ (JavaLangLong *)toLongWithId:(id)value {
  return MUtil_toLongWithId_(value);
}

+ (NSNumber *)toNotNullWithNSNumber:(NSNumber *)value {
  return MUtil_toNotNullWithNSNumber_(value);
}

+ (NSString *)toNotNullWithNSString:(NSString *)value {
  return MUtil_toNotNullWithNSString_(value);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  MUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

@end

NSString *MUtil_actualUrlWithNSString_withNSString_(NSString *baseUrl, NSString *paramString) {
  MUtil_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(baseUrl);
  if (!MUtil_isEmptyWithNSString_(paramString)) {
    (void) [sb appendWithChar:'?'];
    if ([((NSString *) nil_chk(paramString)) hasPrefix:@"&"]) {
      (void) [sb appendWithNSString:[paramString substring:1]];
    }
    else {
      (void) [sb appendWithNSString:paramString];
    }
  }
  return [sb description];
}

jboolean MUtil_isNewerWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *d1, JavaUtilDate *d2) {
  MUtil_initialize();
  if (d1 == nil && d2 == nil) {
    return false;
  }
  if (d1 != nil && d2 == nil) {
    return true;
  }
  if ([((JavaUtilDate *) nil_chk(d1)) afterWithJavaUtilDate:d2]) {
    return true;
  }
  return false;
}

NSString *MUtil_concatenateWithNSStringArray_(IOSObjectArray *c) {
  MUtil_initialize();
  if (c == nil) {
    return nil;
  }
  id<JavaUtilList> l = JavaUtilArrays_asListWithNSObjectArray_(c);
  return MUtil_concatenateWithJavaUtilCollection_(l);
}

NSString *MUtil_concatenateWithJavaUtilCollection_(id<JavaUtilCollection> c) {
  MUtil_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (NSString * __strong s in nil_chk(MUtil_emptyIfNullWithJavaUtilCollection_(c))) {
    (void) [sb appendWithNSString:s];
    (void) [sb appendWithChar:' '];
  }
  return [sb description];
}

NSString *MUtil_mapToUrlWithJavaUtilMap_(id<JavaUtilMap> map) {
  MUtil_initialize();
  id<JavaUtilSet> keySet = [((id<JavaUtilMap>) nil_chk(map)) keySet];
  for (NSString * __strong key in nil_chk(keySet)) {
    id value = [map getWithId:key];
    if (value != nil) {
      MUtil_addNotNullValueWithJavaUtilMap_withNSString_withId_(map, key, value);
    }
  }
  return MUtil_getParametersStrWithJavaUtilMap_(map);
}

void MUtil_addNotNullValueWithJavaUtilMap_withNSString_withId_(id<JavaUtilMap> map, NSString *name, id value) {
  MUtil_initialize();
  if (value != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(map)) putWithId:name withId:[value description]];
  }
}

NSString *MUtil_getParametersStrWithJavaUtilMap_(id<JavaUtilMap> paramMap) {
  MUtil_initialize();
  if ([((id<JavaUtilMap>) nil_chk(paramMap)) size] > 0) {
    JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
    id<JavaUtilSet> keys = [paramMap keySet];
    for (NSString * __strong key in nil_chk(keys)) {
      (void) [buf appendWithNSString:@"&"];
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:key])) appendWithNSString:@"="])) appendWithId:[paramMap getWithId:key]];
    }
    return [buf description];
  }
  return @"";
}

id MUtil_getFirstElementOrNullWithJavaUtilCollection_(id<JavaUtilCollection> coll) {
  MUtil_initialize();
  if (MUtil_isEmptyWithJavaUtilCollection_(coll) || [((id<JavaUtilCollection>) nil_chk(coll)) size] > 1) {
    return nil;
  }
  return [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilCollection>) nil_chk(coll)) iterator])) next];
}

id<JavaUtilCollection> MUtil_emptyIfNullWithNSObjectArray_(IOSObjectArray *a) {
  MUtil_initialize();
  if (a == nil) {
    return JavaUtilCollections_emptyList();
  }
  id<JavaUtilList> l = JavaUtilArrays_asListWithNSObjectArray_(a);
  return MUtil_emptyIfNullWithJavaUtilCollection_(l);
}

id<JavaUtilCollection> MUtil_emptyIfNullWithJavaUtilCollection_(id<JavaUtilCollection> c) {
  MUtil_initialize();
  return ((c == nil) ? ((id) JavaUtilCollections_emptyList()) : ((id) c));
}

jboolean MUtil_isEmptyWithJavaUtilCollection_(id<JavaUtilCollection> c) {
  MUtil_initialize();
  if (c != nil && [c size] > 0) {
    return false;
  }
  return true;
}

jboolean MUtil_isEqualToWithNSString_withNSString_(NSString *s1, NSString *s2) {
  MUtil_initialize();
  if (s1 == nil && s2 == nil) {
    return true;
  }
  if (s1 == nil || s2 == nil) {
    return false;
  }
  return [((NSString *) nil_chk(s1)) isEqual:s2];
}

jboolean MUtil_isGWithNSNumber_withNSNumber_(NSNumber *n1, NSNumber *n2) {
  MUtil_initialize();
  if (n1 == nil && n2 == nil) {
    return false;
  }
  if (n1 == nil || n2 == nil) {
    return false;
  }
  return [((NSNumber *) nil_chk(n1)) doubleValue] > [((NSNumber *) nil_chk(n2)) doubleValue];
}

jboolean MUtil_isEqualToWithNSNumber_withNSNumber_(NSNumber *o1, NSNumber *value) {
  MUtil_initialize();
  return MUtil_isEqualToWithNSNumber_withNSNumber_withJavaLangDouble_(o1, value, nil);
}

jboolean MUtil_isEqualToWithNSNumber_withNSNumber_withJavaLangDouble_(NSNumber *o1, NSNumber *value, JavaLangDouble *allowance) {
  MUtil_initialize();
  if (o1 == nil && value == nil) {
    return true;
  }
  if (o1 == nil || value == nil) {
    return false;
  }
  JavaLangDouble *v1 = JavaLangDouble_valueOfWithDouble_([((NSNumber *) nil_chk(o1)) doubleValue]);
  JavaLangDouble *v2 = JavaLangDouble_valueOfWithDouble_([((NSNumber *) nil_chk(value)) doubleValue]);
  if (v1 == nil && v2 == nil) {
    return true;
  }
  if (v1 == nil || v2 == nil) {
    return false;
  }
  jboolean eq;
  if (allowance == nil) {
    eq = [v1 isEqual:v2];
  }
  else {
    jdouble delta = [v1 doubleValue] - [v2 doubleValue];
    eq = (JavaLangMath_absWithDouble_(delta) < [allowance doubleValue]);
  }
  return eq;
}

jboolean MUtil_isEmptyWithNSString_(NSString *s1) {
  MUtil_initialize();
  if (s1 == nil || [@"" isEqual:[s1 trim]]) {
    return true;
  }
  return false;
}

NSString *MUtil_emptyIfNullWithNSString_(NSString *str) {
  MUtil_initialize();
  if (str == nil) {
    return @"";
  }
  return str;
}

jboolean MUtil_containsAnyCharWithNSString_withNSString_(NSString *strToCheck, NSString *charSeq) {
  MUtil_initialize();
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(charSeq)) length]); i++) {
    if ([((NSString *) nil_chk(strToCheck)) contains:JreStrcat("C", [charSeq charAtWithInt:i])]) {
      return true;
    }
  }
  return false;
}

JavaLangDouble *MUtil_toDoubleWithId_(id value) {
  MUtil_initialize();
  if (value == nil) {
    return nil;
  }
  if ([value isKindOfClass:[NSNumber class]]) {
    return JavaLangDouble_valueOfWithDouble_([((NSNumber *) nil_chk(((NSNumber *) check_class_cast(value, [NSNumber class])))) doubleValue]);
  }
  else if ([value isKindOfClass:[NSString class]]) {
    @try {
      value = (NSString *) check_class_cast(value, [NSString class]);
      return JavaLangDouble_valueOfWithDouble_(JavaLangDouble_parseDoubleWithNSString_((NSString *) check_class_cast(value, [NSString class])));
    }
    @catch (JavaLangNumberFormatException *nfe) {
      return nil;
    }
  }
  else if ([value isKindOfClass:[JavaLangBoolean class]]) {
    return JavaLangDouble_valueOfWithDouble_([((JavaLangBoolean *) nil_chk(JreLoadStatic(JavaLangBoolean, TRUE__))) isEqual:value] ? 1.0 : 0.0);
  }
  return nil;
}

JavaLangInteger *MUtil_toIntWithId_(id value) {
  MUtil_initialize();
  JavaLangLong *l = MUtil_toLongWithId_(value);
  if (l == nil) {
    return nil;
  }
  return JavaLangInteger_valueOfWithInt_([((JavaLangLong *) nil_chk(l)) intValue]);
}

JavaLangLong *MUtil_toLongWithId_(id value) {
  MUtil_initialize();
  if (value == nil) {
    return nil;
  }
  if ([value isKindOfClass:[NSNumber class]]) {
    return JavaLangLong_valueOfWithLong_([((NSNumber *) nil_chk(((NSNumber *) check_class_cast(value, [NSNumber class])))) longLongValue]);
  }
  else if ([value isKindOfClass:[NSString class]]) {
    @try {
      value = (NSString *) check_class_cast(value, [NSString class]);
      return JavaLangLong_valueOfWithLong_(JavaLangLong_parseLongWithNSString_((NSString *) check_class_cast(value, [NSString class])));
    }
    @catch (JavaLangNumberFormatException *nfe) {
      return nil;
    }
  }
  return nil;
}

NSNumber *MUtil_toNotNullWithNSNumber_(NSNumber *value) {
  MUtil_initialize();
  return (value == nil) ? JavaLangInteger_valueOfWithInt_(0) : value;
}

NSString *MUtil_toNotNullWithNSString_(NSString *value) {
  MUtil_initialize();
  return (value == nil) ? @"" : value;
}

void MUtil_init(MUtil *self) {
  (void) NSObject_init(self);
}

MUtil *new_MUtil_init() {
  MUtil *self = [MUtil alloc];
  MUtil_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(MUtil)
